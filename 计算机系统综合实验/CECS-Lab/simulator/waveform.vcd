$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 U clk $end
  $var wire  1 Y commit_wb $end
  $var wire 32 X inst [31:0] $end
  $var wire 32 W pc_cur [31:0] $end
  $var wire  1 V rstn $end
  $var wire  1 Z uncache_read_wb $end
  $scope module CPU $end
   $var wire 32 s D_CACHE_DEPTH [31:0] $end
   $var wire 32 s I_CACHE_DEPTH [31:0] $end
   $var wire 32 r PC_RST [31:0] $end
   $var wire  5 % alu_ctrl [4:0] $end
   $var wire 32 , alu_res [31:0] $end
   $var wire 32 * alu_src0 [31:0] $end
   $var wire  1 \ alu_src0_sel $end
   $var wire 32 + alu_src1 [31:0] $end
   $var wire  1 ] alu_src1_sel $end
   $var wire  1 h br $end
   $var wire  1 _ br_en $end
   $var wire  3 ^ br_type [2:0] $end
   $var wire  1 U clk $end
   $var wire  1 Y commit_wb $end
   $var wire 32 , dm_addr [31:0] $end
   $var wire 32 i dm_rd [31:0] $end
   $var wire 32 / dm_rd_raw [31:0] $end
   $var wire  1 j dm_re $end
   $var wire  3 ^ dm_type [2:0] $end
   $var wire 32 ( dm_wd [31:0] $end
   $var wire  1 c dm_we $end
   $var wire  1 c dm_we_raw $end
   $var wire 32 ) imm [31:0] $end
   $var wire  3 $ imm_type [2:0] $end
   $var wire 32 X inst [31:0] $end
   $var wire  1 ` jal $end
   $var wire  1 a jalr $end
   $var wire  2 k mask [1:0] $end
   $var wire 32 - pc_add4 [31:0] $end
   $var wire 32 W pc_cur [31:0] $end
   $var wire 32 , pc_jal_br [31:0] $end
   $var wire 32 . pc_jalr [31:0] $end
   $var wire 32 [ pc_next [31:0] $end
   $var wire  5 d rf_ra0 [4:0] $end
   $var wire  5 e rf_ra1 [4:0] $end
   $var wire 32 ' rf_rd0 [31:0] $end
   $var wire 32 ( rf_rd1 [31:0] $end
   $var wire  5 f rf_wa [4:0] $end
   $var wire 32 g rf_wd [31:0] $end
   $var wire  2 & rf_wd_sel [1:0] $end
   $var wire  1 b rf_we $end
   $var wire  1 V rstn $end
   $var wire  1 Z uncache_read_wb $end
   $scope module alu $end
    $var wire  5 % alu_ctrl [4:0] $end
    $var wire 32 , alu_res [31:0] $end
    $var wire 32 * alu_src0 [31:0] $end
    $var wire 32 + alu_src1 [31:0] $end
    $var wire 64 0 mul_res [63:0] $end
   $upscope $end
   $scope module alu_sel0 $end
    $var wire 32 * res [31:0] $end
    $var wire  1 \ sel $end
    $var wire 32 ' src0 [31:0] $end
    $var wire 32 W src1 [31:0] $end
   $upscope $end
   $scope module alu_sel1 $end
    $var wire 32 + res [31:0] $end
    $var wire  1 ] sel $end
    $var wire 32 ( src0 [31:0] $end
    $var wire 32 ) src1 [31:0] $end
   $upscope $end
   $scope module branch $end
    $var wire  1 h br $end
    $var wire  1 _ br_en $end
    $var wire  3 ^ br_type [2:0] $end
    $var wire 32 ' rf_rd0 [31:0] $end
    $var wire 32 ( rf_rd1 [31:0] $end
   $upscope $end
   $scope module d_cache $end
    $var wire 32 s DEPTH [31:0] $end
    $var wire 32 , addr [31:0] $end
    $var wire  1 U clk $end
    $var wire  2 k mask [1:0] $end
    $var wire 32 / rd [31:0] $end
    $var wire  1 j re $end
    $var wire 32 ( wd [31:0] $end
    $var wire  1 c we $end
   $upscope $end
   $scope module d_cache_ctrl $end
    $var wire 32 s DEPTH [31:0] $end
    $var wire 32 , addr [31:0] $end
    $var wire 32 , addr_raw [31:0] $end
    $var wire  3 ^ dm_type [2:0] $end
    $var wire  2 k mask [1:0] $end
    $var wire 32 i rd [31:0] $end
    $var wire 32 / rd_raw [31:0] $end
    $var wire 32 ( wd [31:0] $end
    $var wire 32 ( wd_raw [31:0] $end
    $var wire  1 c we $end
    $var wire  1 c we_raw $end
   $upscope $end
   $scope module i_cache $end
    $var wire 32 s DEPTH [31:0] $end
    $var wire 32 W addr [31:0] $end
    $var wire 32 X inst [31:0] $end
   $upscope $end
   $scope module imm_gen $end
    $var wire 32 ) imm [31:0] $end
    $var wire  3 $ imm_type [2:0] $end
    $var wire 32 X inst [31:0] $end
   $upscope $end
   $scope module inst_decoder $end
    $var wire  5 % alu_ctrl [4:0] $end
    $var wire  1 \ alu_src0_sel $end
    $var wire  1 ] alu_src1_sel $end
    $var wire  1 _ br_en $end
    $var wire  3 ^ br_type [2:0] $end
    $var wire  1 j dm_re_raw $end
    $var wire  3 ^ dm_type [2:0] $end
    $var wire  1 c dm_we_raw $end
    $var wire  3 ^ funct3 [2:0] $end
    $var wire  7 m funct7 [6:0] $end
    $var wire  3 $ imm_type [2:0] $end
    $var wire 32 X inst [31:0] $end
    $var wire  1 p is_auipc $end
    $var wire  1 _ is_b_type $end
    $var wire  1 o is_i_basic $end
    $var wire  1 2 is_i_type $end
    $var wire  1 ` is_j_type $end
    $var wire  1 a is_jalr $end
    $var wire  1 j is_load $end
    $var wire  1 q is_lui $end
    $var wire  1 n is_r_type $end
    $var wire  1 c is_s_type $end
    $var wire  1 3 is_u_type $end
    $var wire  1 ` jal $end
    $var wire  1 a jalr $end
    $var wire  7 l opcode [6:0] $end
    $var wire  2 & rf_wd_sel [1:0] $end
    $var wire  1 b rf_we $end
   $upscope $end
   $scope module npc_sel $end
    $var wire  1 h br $end
    $var wire  1 ` jal $end
    $var wire  1 a jalr $end
    $var wire 32 - pc_add4 [31:0] $end
    $var wire 32 , pc_jal_br [31:0] $end
    $var wire 32 . pc_jalr [31:0] $end
    $var wire 32 [ pc_next [31:0] $end
   $upscope $end
   $scope module pc $end
    $var wire 32 r PC_RST [31:0] $end
    $var wire  1 U clk $end
    $var wire 32 4 pc [31:0] $end
    $var wire 32 W pc_cur [31:0] $end
    $var wire 32 [ pc_next [31:0] $end
    $var wire  1 V rstn $end
   $upscope $end
   $scope module reg_file $end
    $var wire  1 U clk $end
    $var wire 32 # i [31:0] $end
    $var wire 32 5 reg_file[0] [31:0] $end
    $var wire 32 ? reg_file[10] [31:0] $end
    $var wire 32 @ reg_file[11] [31:0] $end
    $var wire 32 A reg_file[12] [31:0] $end
    $var wire 32 B reg_file[13] [31:0] $end
    $var wire 32 C reg_file[14] [31:0] $end
    $var wire 32 D reg_file[15] [31:0] $end
    $var wire 32 E reg_file[16] [31:0] $end
    $var wire 32 F reg_file[17] [31:0] $end
    $var wire 32 G reg_file[18] [31:0] $end
    $var wire 32 H reg_file[19] [31:0] $end
    $var wire 32 6 reg_file[1] [31:0] $end
    $var wire 32 I reg_file[20] [31:0] $end
    $var wire 32 J reg_file[21] [31:0] $end
    $var wire 32 K reg_file[22] [31:0] $end
    $var wire 32 L reg_file[23] [31:0] $end
    $var wire 32 M reg_file[24] [31:0] $end
    $var wire 32 N reg_file[25] [31:0] $end
    $var wire 32 O reg_file[26] [31:0] $end
    $var wire 32 P reg_file[27] [31:0] $end
    $var wire 32 Q reg_file[28] [31:0] $end
    $var wire 32 R reg_file[29] [31:0] $end
    $var wire 32 7 reg_file[2] [31:0] $end
    $var wire 32 S reg_file[30] [31:0] $end
    $var wire 32 T reg_file[31] [31:0] $end
    $var wire 32 8 reg_file[3] [31:0] $end
    $var wire 32 9 reg_file[4] [31:0] $end
    $var wire 32 : reg_file[5] [31:0] $end
    $var wire 32 ; reg_file[6] [31:0] $end
    $var wire 32 < reg_file[7] [31:0] $end
    $var wire 32 = reg_file[8] [31:0] $end
    $var wire 32 > reg_file[9] [31:0] $end
    $var wire  5 d rf_ra0 [4:0] $end
    $var wire  5 e rf_ra1 [4:0] $end
    $var wire 32 ' rf_rd0 [31:0] $end
    $var wire 32 ( rf_rd1 [31:0] $end
    $var wire  5 f rf_wa [4:0] $end
    $var wire 32 g rf_wd [31:0] $end
    $var wire  1 b rf_we $end
   $upscope $end
   $scope module rf_sel $end
    $var wire 32 g res [31:0] $end
    $var wire  2 & sel [1:0] $end
    $var wire 32 , src0 [31:0] $end
    $var wire 32 - src1 [31:0] $end
    $var wire 32 i src2 [31:0] $end
    $var wire 32 t src3 [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


